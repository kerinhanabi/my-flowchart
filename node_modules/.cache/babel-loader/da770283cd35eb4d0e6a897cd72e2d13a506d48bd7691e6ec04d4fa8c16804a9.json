{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport FlowchartLink from './FlowchartLink.vue';\nimport FlowchartNode from './FlowchartNode.vue';\nimport { getMousePosition } from '../assets/utility/position.js';\nimport { ref } from 'vue';\nexport default {\n  name: 'VueFlowchart',\n  props: {\n    // scene: {\n    //     type: Object,\n    //     default() {\n    //         return {\n    //             centerX: 1024,\n    //             scale: 1,\n    //             centerY: 140,\n    //             nodes: [],\n    //             links: [],\n    //         }\n    //     }\n    // },\n    // height: {\n    //     type: Number,\n    //     default: 400,\n    // },\n  },\n  setup() {\n    const localScene = ref({\n      scene: {\n        type: Object,\n        default() {\n          return {\n            centerX: 1024,\n            scale: 1,\n            centerY: 140,\n            nodes: [],\n            links: []\n          };\n        }\n      },\n      height: {\n        type: Number,\n        default: 400\n      }\n    });\n    function moveSelectedNode(dx, dy) {\n      let index = localScene.value.nodes.findIndex(item => {\n        return item.id === this.action.dragging;\n      });\n      if (index > -1) {\n        localScene.value.nodes[index].x += dx;\n        localScene.value.nodes[index].y += dy;\n      }\n    }\n    return {\n      localScene,\n      moveSelectedNode\n    };\n  },\n  data() {\n    return {\n      //localScene: JSON.parse(JSON.stringify(this.scene)),\n      moveSelectedNode,\n      action: {\n        linking: false,\n        dragging: false,\n        scrolling: false,\n        selected: 0\n      },\n      mouse: {\n        x: 0,\n        y: 0,\n        lastX: 0,\n        lastY: 0\n      },\n      draggingLink: null,\n      rootDivOffset: {\n        top: 0,\n        left: 0\n      }\n    };\n  },\n  components: {\n    FlowchartLink,\n    FlowchartNode\n  },\n  computed: {\n    nodeOptions() {\n      return {\n        centerY: this.localScene.centerY,\n        centerX: this.localScene.centerX,\n        scale: this.localScene.scale,\n        offsetTop: this.rootDivOffset.top,\n        offsetLeft: this.rootDivOffset.left,\n        selected: this.action.selected\n      };\n    },\n    lines() {\n      const lines = this.localScene.links.map(link => {\n        const fromNode = this.findNodeWithID(link.from);\n        const toNode = this.findNodeWithID(link.to);\n        let x, y, cy, cx, ex, ey;\n        x = this.localScene.centerX + fromNode.x;\n        y = this.localScene.centerY + fromNode.y;\n        [cx, cy] = this.getPortPosition('bottom', x, y);\n        x = this.localScene.centerX + toNode.x;\n        y = this.localScene.centerY + toNode.y;\n        [ex, ey] = this.getPortPosition('top', x, y);\n        return {\n          start: [cx, cy],\n          end: [ex, ey],\n          id: link.id\n        };\n      });\n      if (this.draggingLink) {\n        let x, y, cy, cx;\n        const fromNode = this.findNodeWithID(this.draggingLink.from);\n        x = this.localScene.centerX + fromNode.x;\n        y = this.localScene.centerY + fromNode.y;\n        [cx, cy] = this.getPortPosition('bottom', x, y);\n        // push temp dragging link, mouse cursor postion = link end postion \n        lines.push({\n          start: [cx, cy],\n          end: [this.draggingLink.mx, this.draggingLink.my]\n        });\n      }\n      return lines;\n    }\n  },\n  mounted() {\n    this.rootDivOffset.top = this.$el ? this.$el.offsetTop : 0;\n    this.rootDivOffset.left = this.$el ? this.$el.offsetLeft : 0;\n    this.localScene.nodes.forEach(node => {\n      node.x = Math.random() * (this.$el.clientWidth - 80);\n      node.y = Math.random() * (this.height - 80);\n    });\n    // console.log(22222, this.rootDivOffset);\n  },\n  methods: {\n    findNodeWithID(id) {\n      return this.localScene.nodes.find(item => {\n        return id === item.id;\n      });\n    },\n    getPortPosition(type, x, y) {\n      if (type === 'top') {\n        return [x + 40, y];\n      } else if (type === 'bottom') {\n        return [x + 40, y + 80];\n      }\n    },\n    linkingStart(index) {\n      this.action.linking = true;\n      this.draggingLink = {\n        from: index,\n        mx: 0,\n        my: 0\n      };\n    },\n    linkingStop(index) {\n      // add new Link\n      if (this.draggingLink && this.draggingLink.from !== index) {\n        // check link existence\n        const existed = this.localScene.links.find(link => {\n          return link.from === this.draggingLink.from && link.to === index;\n        });\n        if (!existed) {\n          let maxID = Math.max(0, ...this.localScene.links.map(link => {\n            return link.id;\n          }));\n          const newLink = {\n            id: maxID + 1,\n            from: this.draggingLink.from,\n            to: index\n          };\n          this.localScene.links.push(newLink);\n          this.$emit('linkAdded', newLink);\n        }\n      }\n      this.draggingLink = null;\n    },\n    linkDelete(id) {\n      const deletedLink = this.localScene.links.find(item => {\n        return item.id === id;\n      });\n      if (deletedLink) {\n        this.localScene.links = this.localScene.links.filter(item => {\n          return item.id !== id;\n        });\n        this.$emit('linkBreak', deletedLink);\n      }\n    },\n    nodeSelected(id, e) {\n      this.action.dragging = id;\n      this.action.selected = id;\n      this.$emit('nodeClick', id);\n      this.mouse.lastX = e.pageX || e.clientX + document.documentElement.scrollLeft;\n      this.mouse.lastY = e.pageY || e.clientY + document.documentElement.scrollTop;\n      this.$set(this.localScene.nodes, id, {\n        ...this.localScene.nodes.find(node => node.id === id),\n        visible: true\n      });\n    },\n    handleMove(e) {\n      if (this.action.linking) {\n        [this.mouse.x, this.mouse.y] = getMousePosition(this.$el, e);\n        [this.draggingLink.mx, this.draggingLink.my] = [this.mouse.x, this.mouse.y];\n      }\n      if (this.action.dragging) {\n        this.mouse.x = e.pageX || e.clientX + document.documentElement.scrollLeft;\n        this.mouse.y = e.pageY || e.clientY + document.documentElement.scrollTop;\n        let diffX = this.mouse.x - this.mouse.lastX;\n        let diffY = this.mouse.y - this.mouse.lastY;\n        this.mouse.lastX = this.mouse.x;\n        this.mouse.lastY = this.mouse.y;\n        this.moveSelectedNode(diffX, diffY);\n      }\n      if (this.action.scrolling) {\n        [this.mouse.x, this.mouse.y] = getMousePosition(this.$el, e);\n        let diffX = this.mouse.x - this.mouse.lastX;\n        let diffY = this.mouse.y - this.mouse.lastY;\n        this.mouse.lastX = this.mouse.x;\n        this.mouse.lastY = this.mouse.y;\n        this.localScene.centerX += diffX;\n        this.localScene.centerY += diffY;\n\n        // this.hasDragged = true\n      }\n    },\n    handleUp(e) {\n      const target = e.target || e.srcElement;\n      if (this.$el.contains(target)) {\n        if (typeof target.className !== 'string' || target.className.indexOf('node-input') < 0) {\n          this.draggingLink = null;\n        }\n        if (typeof target.className === 'string' && target.className.indexOf('node-delete') > -1) {\n          // console.log('delete2', this.action.dragging);\n          this.nodeDelete(this.action.dragging);\n        }\n      }\n      this.action.linking = false;\n      this.action.dragging = null;\n      this.action.scrolling = false;\n    },\n    handleDown(e) {\n      const target = e.target || e.srcElement;\n      // console.log('for scroll', target, e.keyCode, e.which)\n      if ((target === this.$el || target.matches('svg, svg *')) && e.which === 1) {\n        this.action.scrolling = true;\n        [this.mouse.lastX, this.mouse.lastY] = getMousePosition(this.$el, e);\n        this.action.selected = null; // deselectAll\n      }\n      this.$emit('canvasClick', e);\n    },\n    moveSelectedNode(dx, dy) {\n      let index = this.localScene.nodes.findIndex(item => {\n        return item.id === this.action.dragging;\n      });\n      let left = this.localScene.nodes[index].x + dx / this.localScene.scale;\n      let top = this.localScene.nodes[index].y + dy / this.localScene.scale;\n      this.$set(this.localScene.nodes, index, Object.assign(this.localScene.nodes[index], {\n        x: left,\n        y: top\n      }));\n    },\n    nodeDelete(id) {\n      this.localScene.nodes = this.localScene.nodes.filter(node => {\n        return node.id !== id;\n      });\n      this.localScene.links = this.localScene.links.filter(link => {\n        return link.from !== id && link.to !== id;\n      });\n      this.$emit('nodeDelete', id);\n    }\n  }\n};","map":{"version":3,"names":["FlowchartLink","FlowchartNode","getMousePosition","ref","name","props","setup","localScene","scene","type","Object","default","centerX","scale","centerY","nodes","links","height","Number","moveSelectedNode","dx","dy","index","value","findIndex","item","id","action","dragging","x","y","data","linking","scrolling","selected","mouse","lastX","lastY","draggingLink","rootDivOffset","top","left","components","computed","nodeOptions","offsetTop","offsetLeft","lines","map","link","fromNode","findNodeWithID","from","toNode","to","cy","cx","ex","ey","getPortPosition","start","end","push","mx","my","mounted","$el","forEach","node","Math","random","clientWidth","methods","find","linkingStart","linkingStop","existed","maxID","max","newLink","$emit","linkDelete","deletedLink","filter","nodeSelected","e","pageX","clientX","document","documentElement","scrollLeft","pageY","clientY","scrollTop","$set","visible","handleMove","diffX","diffY","handleUp","target","srcElement","contains","className","indexOf","nodeDelete","handleDown","matches","which","assign"],"sources":["/Users/kerinwong/Documents/VSCode_tutorial/my-simple-flowchart/src/components/SimpleFlowchart.vue"],"sourcesContent":["<template>\n    <div class=\"flowchart-container\" \n        @mousemove=\"handleMove\" \n        @mouseup=\"handleUp\"\n        @mousedown=\"handleDown\">\n        <svg width=\"100%\" :height=\"`${height}px`\">\n        <flowchart-link :link=\"link\" \n            v-for=\"(link, index) in lines\" \n            :key=\"`link${index}`\"\n            @deleteLink=\"linkDelete(link.id)\">\n        </flowchart-link>\n        </svg>\n        <flowchart-node :node=\"node\" \n        v-for=\"(node, index) in scene.nodes\" \n        :key=\"`node${index}`\"\n        :options=\"nodeOptions\"\n        @linkingStart=\"linkingStart(node.id)\"\n        @linkingStop=\"linkingStop(node.id)\"\n        @nodeSelected=\"nodeSelected(node.id, $event)\">\n        </flowchart-node>\n    </div>\n</template>\n\n<script>\nimport FlowchartLink from './FlowchartLink.vue';\nimport FlowchartNode from './FlowchartNode.vue';\nimport { getMousePosition } from '../assets/utility/position.js';\nimport { ref } from 'vue';\n\n\nexport default {\n    name: 'VueFlowchart',\n    props: {\n    // scene: {\n    //     type: Object,\n    //     default() {\n    //         return {\n    //             centerX: 1024,\n    //             scale: 1,\n    //             centerY: 140,\n    //             nodes: [],\n    //             links: [],\n    //         }\n    //     }\n    // },\n    // height: {\n    //     type: Number,\n    //     default: 400,\n    // },\n    },\n    setup() {\n    const localScene = ref({\n      scene: {\n        type: Object,\n        default() {\n            return {\n              centerX: 1024,\n              scale: 1,\n              centerY: 140,\n              nodes: [],\n              links: [],\n            }\n        }\n      },\n      height: {\n          type: Number,\n          default: 400,\n      }\n    });\n\n    function moveSelectedNode(dx, dy) {\n      let index = localScene.value.nodes.findIndex((item) => {\n        return item.id === this.action.dragging\n      })\n      if (index > -1) {\n        localScene.value.nodes[index].x += dx\n        localScene.value.nodes[index].y += dy\n      }\n    }\n\n    return {\n      localScene,\n      moveSelectedNode\n    }\n    },\n    data() {\n      return {\n        //localScene: JSON.parse(JSON.stringify(this.scene)),\n        moveSelectedNode,\n        action: {\n          linking: false,\n          dragging: false,\n          scrolling: false,\n          selected: 0,\n        },\n        mouse: {\n          x: 0,\n          y: 0,\n          lastX: 0,\n          lastY: 0,\n        },\n        draggingLink: null,\n        rootDivOffset: {\n          top: 0,\n          left: 0\n        },\n      };\n    },\n    components: {\n      FlowchartLink,\n      FlowchartNode,\n    },\n    computed: {\n      nodeOptions() {\n        return {\n          centerY: this.localScene.centerY,\n          centerX: this.localScene.centerX,\n          scale: this.localScene.scale,\n          offsetTop: this.rootDivOffset.top,\n          offsetLeft: this.rootDivOffset.left,\n          selected: this.action.selected,\n        }\n      },\n      lines() {\n        const lines = this.localScene.links.map((link) => {\n          const fromNode = this.findNodeWithID(link.from)\n          const toNode = this.findNodeWithID(link.to)\n          let x, y, cy, cx, ex, ey;\n          x = this.localScene.centerX + fromNode.x;\n          y = this.localScene.centerY + fromNode.y;\n          [cx, cy] = this.getPortPosition('bottom', x, y);\n          x = this.localScene.centerX + toNode.x;\n          y = this.localScene.centerY + toNode.y;\n          [ex, ey] = this.getPortPosition('top', x, y);\n          return { \n            start: [cx, cy], \n            end: [ex, ey],\n            id: link.id,\n          };\n        })\n        if (this.draggingLink) {\n          let x, y, cy, cx;\n          const fromNode = this.findNodeWithID(this.draggingLink.from)\n          x = this.localScene.centerX + fromNode.x;\n          y = this.localScene.centerY + fromNode.y;\n          [cx, cy] = this.getPortPosition('bottom', x, y);\n          // push temp dragging link, mouse cursor postion = link end postion \n          lines.push({ \n            start: [cx, cy], \n            end: [this.draggingLink.mx, this.draggingLink.my],\n          })\n        }\n        return lines;\n      }\n    },\n    mounted() {\n      this.rootDivOffset.top = this.$el ? this.$el.offsetTop : 0;\n      this.rootDivOffset.left = this.$el ? this.$el.offsetLeft : 0;\n      this.localScene.nodes.forEach(node => {\n        node.x = Math.random() * (this.$el.clientWidth - 80);\n        node.y = Math.random() * (this.height - 80);\n      });\n      // console.log(22222, this.rootDivOffset);\n    },\n    methods: {\n      findNodeWithID(id) {\n        return this.localScene.nodes.find((item) => {\n            return id === item.id\n        })\n      },\n      getPortPosition(type, x, y) {\n        if (type === 'top') {\n          return [x + 40, y];\n        }\n        else if (type === 'bottom') {\n          return [x + 40, y + 80];\n        }\n      },\n      linkingStart(index) {\n        this.action.linking = true;\n        this.draggingLink = {\n          from: index,\n          mx: 0,\n          my: 0,\n        };\n      },\n      linkingStop(index) {\n        // add new Link\n        if (this.draggingLink && this.draggingLink.from !== index) {\n          // check link existence\n          const existed = this.localScene.links.find((link) => {\n            return link.from === this.draggingLink.from && link.to === index;\n          })\n          if (!existed) {\n            let maxID = Math.max(0, ...this.localScene.links.map((link) => {\n              return link.id\n            }))\n            const newLink = {\n              id: maxID + 1,\n              from: this.draggingLink.from,\n              to: index,\n            };\n            this.localScene.links.push(newLink)\n            this.$emit('linkAdded', newLink)\n          }\n        }\n        this.draggingLink = null\n      },\n      linkDelete(id) {\n        const deletedLink = this.localScene.links.find((item) => {\n            return item.id === id;\n        });\n        if (deletedLink) {\n          this.localScene.links = this.localScene.links.filter((item) => {\n              return item.id !== id;\n          });\n          this.$emit('linkBreak', deletedLink);\n        }\n      },\n      nodeSelected(id, e) {\n        this.action.dragging = id;\n        this.action.selected = id;\n        this.$emit('nodeClick', id);\n        this.mouse.lastX = e.pageX || e.clientX + document.documentElement.scrollLeft\n        this.mouse.lastY = e.pageY || e.clientY + document.documentElement.scrollTop\n                \n        this.$set(this.localScene.nodes, id, {\n          ...this.localScene.nodes.find(node => node.id === id),\n          visible: true,\n        })\n      },\n      handleMove(e) {\n        if (this.action.linking) {\n          [this.mouse.x, this.mouse.y] = getMousePosition(this.$el, e);\n          [this.draggingLink.mx, this.draggingLink.my] = [this.mouse.x, this.mouse.y];\n        }\n        if (this.action.dragging) {\n          this.mouse.x = e.pageX || e.clientX + document.documentElement.scrollLeft\n          this.mouse.y = e.pageY || e.clientY + document.documentElement.scrollTop\n          let diffX = this.mouse.x - this.mouse.lastX;\n          let diffY = this.mouse.y - this.mouse.lastY;\n  \n          this.mouse.lastX = this.mouse.x;\n          this.mouse.lastY = this.mouse.y;\n          this.moveSelectedNode(diffX, diffY);\n        }\n        if (this.action.scrolling) {\n          [this.mouse.x, this.mouse.y] = getMousePosition(this.$el, e);\n          let diffX = this.mouse.x - this.mouse.lastX;\n          let diffY = this.mouse.y - this.mouse.lastY;\n  \n          this.mouse.lastX = this.mouse.x;\n          this.mouse.lastY = this.mouse.y;\n  \n          this.localScene.centerX += diffX;\n          this.localScene.centerY += diffY;\n  \n          // this.hasDragged = true\n        }\n      },\n      handleUp(e) {\n        const target = e.target || e.srcElement;\n        if (this.$el.contains(target)) {\n          if (typeof target.className !== 'string' || target.className.indexOf('node-input') < 0) {\n            this.draggingLink = null;\n          }\n          if (typeof target.className === 'string' && target.className.indexOf('node-delete') > -1) {\n            // console.log('delete2', this.action.dragging);\n            this.nodeDelete(this.action.dragging);\n          }\n        }\n        this.action.linking = false;\n        this.action.dragging = null;\n        this.action.scrolling = false;\n      },\n      handleDown(e) {\n        const target = e.target || e.srcElement;\n        // console.log('for scroll', target, e.keyCode, e.which)\n        if ((target === this.$el || target.matches('svg, svg *')) && e.which === 1) {\n          this.action.scrolling = true;\n          [this.mouse.lastX, this.mouse.lastY] = getMousePosition(this.$el, e);\n          this.action.selected = null; // deselectAll\n        }\n        this.$emit('canvasClick', e);\n      },\n      moveSelectedNode(dx, dy) {\n        let index = this.localScene.nodes.findIndex((item) => {\n          return item.id === this.action.dragging\n        })\n        let left = this.localScene.nodes[index].x + dx / this.localScene.scale;\n        let top = this.localScene.nodes[index].y + dy / this.localScene.scale;\n        this.$set(this.localScene.nodes, index, Object.assign(this.localScene.nodes[index], {\n          x: left,\n          y: top,\n        }));\n      },\n      nodeDelete(id) {\n        this.localScene.nodes = this.localScene.nodes.filter((node) => {\n          return node.id !== id;\n        })\n        this.localScene.links = this.localScene.links.filter((link) => {\n          return link.from !== id && link.to !== id\n        })\n        this.$emit('nodeDelete', id)\n      }\n    },\n  }\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n.flowchart-container {\nmargin: 0;\nbackground: #ddd;\nposition: relative;\noverflow: hidden;\n    svg {\n        cursor: grab;\n    }\n}\n</style>\n"],"mappings":";AAwBA,OAAOA,aAAY,MAAO,qBAAqB;AAC/C,OAAOC,aAAY,MAAO,qBAAqB;AAC/C,SAASC,gBAAe,QAAS,+BAA+B;AAChE,SAASC,GAAE,QAAS,KAAK;AAGzB,eAAe;EACXC,IAAI,EAAE,cAAc;EACpBC,KAAK,EAAE;IACP;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACC;EACDC,KAAKA,CAAA,EAAG;IACR,MAAMC,UAAS,GAAIJ,GAAG,CAAC;MACrBK,KAAK,EAAE;QACLC,IAAI,EAAEC,MAAM;QACZC,OAAOA,CAAA,EAAG;UACN,OAAO;YACLC,OAAO,EAAE,IAAI;YACbC,KAAK,EAAE,CAAC;YACRC,OAAO,EAAE,GAAG;YACZC,KAAK,EAAE,EAAE;YACTC,KAAK,EAAE;UACT;QACJ;MACF,CAAC;MACDC,MAAM,EAAE;QACJR,IAAI,EAAES,MAAM;QACZP,OAAO,EAAE;MACb;IACF,CAAC,CAAC;IAEF,SAASQ,gBAAgBA,CAACC,EAAE,EAAEC,EAAE,EAAE;MAChC,IAAIC,KAAI,GAAIf,UAAU,CAACgB,KAAK,CAACR,KAAK,CAACS,SAAS,CAAEC,IAAI,IAAK;QACrD,OAAOA,IAAI,CAACC,EAAC,KAAM,IAAI,CAACC,MAAM,CAACC,QAAO;MACxC,CAAC;MACD,IAAIN,KAAI,GAAI,CAAC,CAAC,EAAE;QACdf,UAAU,CAACgB,KAAK,CAACR,KAAK,CAACO,KAAK,CAAC,CAACO,CAAA,IAAKT,EAAC;QACpCb,UAAU,CAACgB,KAAK,CAACR,KAAK,CAACO,KAAK,CAAC,CAACQ,CAAA,IAAKT,EAAC;MACtC;IACF;IAEA,OAAO;MACLd,UAAU;MACVY;IACF;EACA,CAAC;EACDY,IAAIA,CAAA,EAAG;IACL,OAAO;MACL;MACAZ,gBAAgB;MAChBQ,MAAM,EAAE;QACNK,OAAO,EAAE,KAAK;QACdJ,QAAQ,EAAE,KAAK;QACfK,SAAS,EAAE,KAAK;QAChBC,QAAQ,EAAE;MACZ,CAAC;MACDC,KAAK,EAAE;QACLN,CAAC,EAAE,CAAC;QACJC,CAAC,EAAE,CAAC;QACJM,KAAK,EAAE,CAAC;QACRC,KAAK,EAAE;MACT,CAAC;MACDC,YAAY,EAAE,IAAI;MAClBC,aAAa,EAAE;QACbC,GAAG,EAAE,CAAC;QACNC,IAAI,EAAE;MACR;IACF,CAAC;EACH,CAAC;EACDC,UAAU,EAAE;IACV1C,aAAa;IACbC;EACF,CAAC;EACD0C,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ,OAAO;QACL9B,OAAO,EAAE,IAAI,CAACP,UAAU,CAACO,OAAO;QAChCF,OAAO,EAAE,IAAI,CAACL,UAAU,CAACK,OAAO;QAChCC,KAAK,EAAE,IAAI,CAACN,UAAU,CAACM,KAAK;QAC5BgC,SAAS,EAAE,IAAI,CAACN,aAAa,CAACC,GAAG;QACjCM,UAAU,EAAE,IAAI,CAACP,aAAa,CAACE,IAAI;QACnCP,QAAQ,EAAE,IAAI,CAACP,MAAM,CAACO;MACxB;IACF,CAAC;IACDa,KAAKA,CAAA,EAAG;MACN,MAAMA,KAAI,GAAI,IAAI,CAACxC,UAAU,CAACS,KAAK,CAACgC,GAAG,CAAEC,IAAI,IAAK;QAChD,MAAMC,QAAO,GAAI,IAAI,CAACC,cAAc,CAACF,IAAI,CAACG,IAAI;QAC9C,MAAMC,MAAK,GAAI,IAAI,CAACF,cAAc,CAACF,IAAI,CAACK,EAAE;QAC1C,IAAIzB,CAAC,EAAEC,CAAC,EAAEyB,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;QACxB7B,CAAA,GAAI,IAAI,CAACtB,UAAU,CAACK,OAAM,GAAIsC,QAAQ,CAACrB,CAAC;QACxCC,CAAA,GAAI,IAAI,CAACvB,UAAU,CAACO,OAAM,GAAIoC,QAAQ,CAACpB,CAAC;QACxC,CAAC0B,EAAE,EAAED,EAAE,IAAI,IAAI,CAACI,eAAe,CAAC,QAAQ,EAAE9B,CAAC,EAAEC,CAAC,CAAC;QAC/CD,CAAA,GAAI,IAAI,CAACtB,UAAU,CAACK,OAAM,GAAIyC,MAAM,CAACxB,CAAC;QACtCC,CAAA,GAAI,IAAI,CAACvB,UAAU,CAACO,OAAM,GAAIuC,MAAM,CAACvB,CAAC;QACtC,CAAC2B,EAAE,EAAEC,EAAE,IAAI,IAAI,CAACC,eAAe,CAAC,KAAK,EAAE9B,CAAC,EAAEC,CAAC,CAAC;QAC5C,OAAO;UACL8B,KAAK,EAAE,CAACJ,EAAE,EAAED,EAAE,CAAC;UACfM,GAAG,EAAE,CAACJ,EAAE,EAAEC,EAAE,CAAC;UACbhC,EAAE,EAAEuB,IAAI,CAACvB;QACX,CAAC;MACH,CAAC;MACD,IAAI,IAAI,CAACY,YAAY,EAAE;QACrB,IAAIT,CAAC,EAAEC,CAAC,EAAEyB,EAAE,EAAEC,EAAE;QAChB,MAAMN,QAAO,GAAI,IAAI,CAACC,cAAc,CAAC,IAAI,CAACb,YAAY,CAACc,IAAI;QAC3DvB,CAAA,GAAI,IAAI,CAACtB,UAAU,CAACK,OAAM,GAAIsC,QAAQ,CAACrB,CAAC;QACxCC,CAAA,GAAI,IAAI,CAACvB,UAAU,CAACO,OAAM,GAAIoC,QAAQ,CAACpB,CAAC;QACxC,CAAC0B,EAAE,EAAED,EAAE,IAAI,IAAI,CAACI,eAAe,CAAC,QAAQ,EAAE9B,CAAC,EAAEC,CAAC,CAAC;QAC/C;QACAiB,KAAK,CAACe,IAAI,CAAC;UACTF,KAAK,EAAE,CAACJ,EAAE,EAAED,EAAE,CAAC;UACfM,GAAG,EAAE,CAAC,IAAI,CAACvB,YAAY,CAACyB,EAAE,EAAE,IAAI,CAACzB,YAAY,CAAC0B,EAAE;QAClD,CAAC;MACH;MACA,OAAOjB,KAAK;IACd;EACF,CAAC;EACDkB,OAAOA,CAAA,EAAG;IACR,IAAI,CAAC1B,aAAa,CAACC,GAAE,GAAI,IAAI,CAAC0B,GAAE,GAAI,IAAI,CAACA,GAAG,CAACrB,SAAQ,GAAI,CAAC;IAC1D,IAAI,CAACN,aAAa,CAACE,IAAG,GAAI,IAAI,CAACyB,GAAE,GAAI,IAAI,CAACA,GAAG,CAACpB,UAAS,GAAI,CAAC;IAC5D,IAAI,CAACvC,UAAU,CAACQ,KAAK,CAACoD,OAAO,CAACC,IAAG,IAAK;MACpCA,IAAI,CAACvC,CAAA,GAAIwC,IAAI,CAACC,MAAM,CAAC,KAAK,IAAI,CAACJ,GAAG,CAACK,WAAU,GAAI,EAAE,CAAC;MACpDH,IAAI,CAACtC,CAAA,GAAIuC,IAAI,CAACC,MAAM,CAAC,KAAK,IAAI,CAACrD,MAAK,GAAI,EAAE,CAAC;IAC7C,CAAC,CAAC;IACF;EACF,CAAC;EACDuD,OAAO,EAAE;IACPrB,cAAcA,CAACzB,EAAE,EAAE;MACjB,OAAO,IAAI,CAACnB,UAAU,CAACQ,KAAK,CAAC0D,IAAI,CAAEhD,IAAI,IAAK;QACxC,OAAOC,EAAC,KAAMD,IAAI,CAACC,EAAC;MACxB,CAAC;IACH,CAAC;IACDiC,eAAeA,CAAClD,IAAI,EAAEoB,CAAC,EAAEC,CAAC,EAAE;MAC1B,IAAIrB,IAAG,KAAM,KAAK,EAAE;QAClB,OAAO,CAACoB,CAAA,GAAI,EAAE,EAAEC,CAAC,CAAC;MACpB,OACK,IAAIrB,IAAG,KAAM,QAAQ,EAAE;QAC1B,OAAO,CAACoB,CAAA,GAAI,EAAE,EAAEC,CAAA,GAAI,EAAE,CAAC;MACzB;IACF,CAAC;IACD4C,YAAYA,CAACpD,KAAK,EAAE;MAClB,IAAI,CAACK,MAAM,CAACK,OAAM,GAAI,IAAI;MAC1B,IAAI,CAACM,YAAW,GAAI;QAClBc,IAAI,EAAE9B,KAAK;QACXyC,EAAE,EAAE,CAAC;QACLC,EAAE,EAAE;MACN,CAAC;IACH,CAAC;IACDW,WAAWA,CAACrD,KAAK,EAAE;MACjB;MACA,IAAI,IAAI,CAACgB,YAAW,IAAK,IAAI,CAACA,YAAY,CAACc,IAAG,KAAM9B,KAAK,EAAE;QACzD;QACA,MAAMsD,OAAM,GAAI,IAAI,CAACrE,UAAU,CAACS,KAAK,CAACyD,IAAI,CAAExB,IAAI,IAAK;UACnD,OAAOA,IAAI,CAACG,IAAG,KAAM,IAAI,CAACd,YAAY,CAACc,IAAG,IAAKH,IAAI,CAACK,EAAC,KAAMhC,KAAK;QAClE,CAAC;QACD,IAAI,CAACsD,OAAO,EAAE;UACZ,IAAIC,KAAI,GAAIR,IAAI,CAACS,GAAG,CAAC,CAAC,EAAE,GAAG,IAAI,CAACvE,UAAU,CAACS,KAAK,CAACgC,GAAG,CAAEC,IAAI,IAAK;YAC7D,OAAOA,IAAI,CAACvB,EAAC;UACf,CAAC,CAAC;UACF,MAAMqD,OAAM,GAAI;YACdrD,EAAE,EAAEmD,KAAI,GAAI,CAAC;YACbzB,IAAI,EAAE,IAAI,CAACd,YAAY,CAACc,IAAI;YAC5BE,EAAE,EAAEhC;UACN,CAAC;UACD,IAAI,CAACf,UAAU,CAACS,KAAK,CAAC8C,IAAI,CAACiB,OAAO;UAClC,IAAI,CAACC,KAAK,CAAC,WAAW,EAAED,OAAO;QACjC;MACF;MACA,IAAI,CAACzC,YAAW,GAAI,IAAG;IACzB,CAAC;IACD2C,UAAUA,CAACvD,EAAE,EAAE;MACb,MAAMwD,WAAU,GAAI,IAAI,CAAC3E,UAAU,CAACS,KAAK,CAACyD,IAAI,CAAEhD,IAAI,IAAK;QACrD,OAAOA,IAAI,CAACC,EAAC,KAAMA,EAAE;MACzB,CAAC,CAAC;MACF,IAAIwD,WAAW,EAAE;QACf,IAAI,CAAC3E,UAAU,CAACS,KAAI,GAAI,IAAI,CAACT,UAAU,CAACS,KAAK,CAACmE,MAAM,CAAE1D,IAAI,IAAK;UAC3D,OAAOA,IAAI,CAACC,EAAC,KAAMA,EAAE;QACzB,CAAC,CAAC;QACF,IAAI,CAACsD,KAAK,CAAC,WAAW,EAAEE,WAAW,CAAC;MACtC;IACF,CAAC;IACDE,YAAYA,CAAC1D,EAAE,EAAE2D,CAAC,EAAE;MAClB,IAAI,CAAC1D,MAAM,CAACC,QAAO,GAAIF,EAAE;MACzB,IAAI,CAACC,MAAM,CAACO,QAAO,GAAIR,EAAE;MACzB,IAAI,CAACsD,KAAK,CAAC,WAAW,EAAEtD,EAAE,CAAC;MAC3B,IAAI,CAACS,KAAK,CAACC,KAAI,GAAIiD,CAAC,CAACC,KAAI,IAAKD,CAAC,CAACE,OAAM,GAAIC,QAAQ,CAACC,eAAe,CAACC,UAAS;MAC5E,IAAI,CAACvD,KAAK,CAACE,KAAI,GAAIgD,CAAC,CAACM,KAAI,IAAKN,CAAC,CAACO,OAAM,GAAIJ,QAAQ,CAACC,eAAe,CAACI,SAAQ;MAE3E,IAAI,CAACC,IAAI,CAAC,IAAI,CAACvF,UAAU,CAACQ,KAAK,EAAEW,EAAE,EAAE;QACnC,GAAG,IAAI,CAACnB,UAAU,CAACQ,KAAK,CAAC0D,IAAI,CAACL,IAAG,IAAKA,IAAI,CAAC1C,EAAC,KAAMA,EAAE,CAAC;QACrDqE,OAAO,EAAE;MACX,CAAC;IACH,CAAC;IACDC,UAAUA,CAACX,CAAC,EAAE;MACZ,IAAI,IAAI,CAAC1D,MAAM,CAACK,OAAO,EAAE;QACvB,CAAC,IAAI,CAACG,KAAK,CAACN,CAAC,EAAE,IAAI,CAACM,KAAK,CAACL,CAAC,IAAI5B,gBAAgB,CAAC,IAAI,CAACgE,GAAG,EAAEmB,CAAC,CAAC;QAC5D,CAAC,IAAI,CAAC/C,YAAY,CAACyB,EAAE,EAAE,IAAI,CAACzB,YAAY,CAAC0B,EAAE,IAAI,CAAC,IAAI,CAAC7B,KAAK,CAACN,CAAC,EAAE,IAAI,CAACM,KAAK,CAACL,CAAC,CAAC;MAC7E;MACA,IAAI,IAAI,CAACH,MAAM,CAACC,QAAQ,EAAE;QACxB,IAAI,CAACO,KAAK,CAACN,CAAA,GAAIwD,CAAC,CAACC,KAAI,IAAKD,CAAC,CAACE,OAAM,GAAIC,QAAQ,CAACC,eAAe,CAACC,UAAS;QACxE,IAAI,CAACvD,KAAK,CAACL,CAAA,GAAIuD,CAAC,CAACM,KAAI,IAAKN,CAAC,CAACO,OAAM,GAAIJ,QAAQ,CAACC,eAAe,CAACI,SAAQ;QACvE,IAAII,KAAI,GAAI,IAAI,CAAC9D,KAAK,CAACN,CAAA,GAAI,IAAI,CAACM,KAAK,CAACC,KAAK;QAC3C,IAAI8D,KAAI,GAAI,IAAI,CAAC/D,KAAK,CAACL,CAAA,GAAI,IAAI,CAACK,KAAK,CAACE,KAAK;QAE3C,IAAI,CAACF,KAAK,CAACC,KAAI,GAAI,IAAI,CAACD,KAAK,CAACN,CAAC;QAC/B,IAAI,CAACM,KAAK,CAACE,KAAI,GAAI,IAAI,CAACF,KAAK,CAACL,CAAC;QAC/B,IAAI,CAACX,gBAAgB,CAAC8E,KAAK,EAAEC,KAAK,CAAC;MACrC;MACA,IAAI,IAAI,CAACvE,MAAM,CAACM,SAAS,EAAE;QACzB,CAAC,IAAI,CAACE,KAAK,CAACN,CAAC,EAAE,IAAI,CAACM,KAAK,CAACL,CAAC,IAAI5B,gBAAgB,CAAC,IAAI,CAACgE,GAAG,EAAEmB,CAAC,CAAC;QAC5D,IAAIY,KAAI,GAAI,IAAI,CAAC9D,KAAK,CAACN,CAAA,GAAI,IAAI,CAACM,KAAK,CAACC,KAAK;QAC3C,IAAI8D,KAAI,GAAI,IAAI,CAAC/D,KAAK,CAACL,CAAA,GAAI,IAAI,CAACK,KAAK,CAACE,KAAK;QAE3C,IAAI,CAACF,KAAK,CAACC,KAAI,GAAI,IAAI,CAACD,KAAK,CAACN,CAAC;QAC/B,IAAI,CAACM,KAAK,CAACE,KAAI,GAAI,IAAI,CAACF,KAAK,CAACL,CAAC;QAE/B,IAAI,CAACvB,UAAU,CAACK,OAAM,IAAKqF,KAAK;QAChC,IAAI,CAAC1F,UAAU,CAACO,OAAM,IAAKoF,KAAK;;QAEhC;MACF;IACF,CAAC;IACDC,QAAQA,CAACd,CAAC,EAAE;MACV,MAAMe,MAAK,GAAIf,CAAC,CAACe,MAAK,IAAKf,CAAC,CAACgB,UAAU;MACvC,IAAI,IAAI,CAACnC,GAAG,CAACoC,QAAQ,CAACF,MAAM,CAAC,EAAE;QAC7B,IAAI,OAAOA,MAAM,CAACG,SAAQ,KAAM,QAAO,IAAKH,MAAM,CAACG,SAAS,CAACC,OAAO,CAAC,YAAY,IAAI,CAAC,EAAE;UACtF,IAAI,CAAClE,YAAW,GAAI,IAAI;QAC1B;QACA,IAAI,OAAO8D,MAAM,CAACG,SAAQ,KAAM,QAAO,IAAKH,MAAM,CAACG,SAAS,CAACC,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC,EAAE;UACxF;UACA,IAAI,CAACC,UAAU,CAAC,IAAI,CAAC9E,MAAM,CAACC,QAAQ,CAAC;QACvC;MACF;MACA,IAAI,CAACD,MAAM,CAACK,OAAM,GAAI,KAAK;MAC3B,IAAI,CAACL,MAAM,CAACC,QAAO,GAAI,IAAI;MAC3B,IAAI,CAACD,MAAM,CAACM,SAAQ,GAAI,KAAK;IAC/B,CAAC;IACDyE,UAAUA,CAACrB,CAAC,EAAE;MACZ,MAAMe,MAAK,GAAIf,CAAC,CAACe,MAAK,IAAKf,CAAC,CAACgB,UAAU;MACvC;MACA,IAAI,CAACD,MAAK,KAAM,IAAI,CAAClC,GAAE,IAAKkC,MAAM,CAACO,OAAO,CAAC,YAAY,CAAC,KAAKtB,CAAC,CAACuB,KAAI,KAAM,CAAC,EAAE;QAC1E,IAAI,CAACjF,MAAM,CAACM,SAAQ,GAAI,IAAI;QAC5B,CAAC,IAAI,CAACE,KAAK,CAACC,KAAK,EAAE,IAAI,CAACD,KAAK,CAACE,KAAK,IAAInC,gBAAgB,CAAC,IAAI,CAACgE,GAAG,EAAEmB,CAAC,CAAC;QACpE,IAAI,CAAC1D,MAAM,CAACO,QAAO,GAAI,IAAI,EAAE;MAC/B;MACA,IAAI,CAAC8C,KAAK,CAAC,aAAa,EAAEK,CAAC,CAAC;IAC9B,CAAC;IACDlE,gBAAgBA,CAACC,EAAE,EAAEC,EAAE,EAAE;MACvB,IAAIC,KAAI,GAAI,IAAI,CAACf,UAAU,CAACQ,KAAK,CAACS,SAAS,CAAEC,IAAI,IAAK;QACpD,OAAOA,IAAI,CAACC,EAAC,KAAM,IAAI,CAACC,MAAM,CAACC,QAAO;MACxC,CAAC;MACD,IAAIa,IAAG,GAAI,IAAI,CAAClC,UAAU,CAACQ,KAAK,CAACO,KAAK,CAAC,CAACO,CAAA,GAAIT,EAAC,GAAI,IAAI,CAACb,UAAU,CAACM,KAAK;MACtE,IAAI2B,GAAE,GAAI,IAAI,CAACjC,UAAU,CAACQ,KAAK,CAACO,KAAK,CAAC,CAACQ,CAAA,GAAIT,EAAC,GAAI,IAAI,CAACd,UAAU,CAACM,KAAK;MACrE,IAAI,CAACiF,IAAI,CAAC,IAAI,CAACvF,UAAU,CAACQ,KAAK,EAAEO,KAAK,EAAEZ,MAAM,CAACmG,MAAM,CAAC,IAAI,CAACtG,UAAU,CAACQ,KAAK,CAACO,KAAK,CAAC,EAAE;QAClFO,CAAC,EAAEY,IAAI;QACPX,CAAC,EAAEU;MACL,CAAC,CAAC,CAAC;IACL,CAAC;IACDiE,UAAUA,CAAC/E,EAAE,EAAE;MACb,IAAI,CAACnB,UAAU,CAACQ,KAAI,GAAI,IAAI,CAACR,UAAU,CAACQ,KAAK,CAACoE,MAAM,CAAEf,IAAI,IAAK;QAC7D,OAAOA,IAAI,CAAC1C,EAAC,KAAMA,EAAE;MACvB,CAAC;MACD,IAAI,CAACnB,UAAU,CAACS,KAAI,GAAI,IAAI,CAACT,UAAU,CAACS,KAAK,CAACmE,MAAM,CAAElC,IAAI,IAAK;QAC7D,OAAOA,IAAI,CAACG,IAAG,KAAM1B,EAAC,IAAKuB,IAAI,CAACK,EAAC,KAAM5B,EAAC;MAC1C,CAAC;MACD,IAAI,CAACsD,KAAK,CAAC,YAAY,EAAEtD,EAAE;IAC7B;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}