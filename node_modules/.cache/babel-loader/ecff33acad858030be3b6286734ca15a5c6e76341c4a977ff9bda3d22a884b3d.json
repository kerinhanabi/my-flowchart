{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport FlowchartLink from './FlowchartLink.vue';\nimport FlowchartNode from './FlowchartNode.vue';\nimport { getMousePosition } from '../assets/utility/position.js';\nexport default {\n  name: 'VueFlowchart',\n  props: {\n    scene: {\n      type: Object,\n      default() {\n        return {\n          centerX: 1024,\n          scale: 1,\n          centerY: 140,\n          nodes: [],\n          links: [],\n          x: Math.random() * 500,\n          y: Math.random() * 500\n        };\n      }\n    },\n    height: {\n      type: Number,\n      default: 400\n    }\n  },\n  data() {\n    return {\n      localScene: JSON.parse(JSON.stringify(this.scene)),\n      dragging: false,\n      currentNode: null,\n      offsetX: 0,\n      offsetY: 0,\n      action: {\n        linking: false,\n        dragging: false,\n        scrolling: false,\n        selected: 0\n      },\n      mouse: {\n        x: 0,\n        y: 0,\n        lastX: 0,\n        lastY: 0\n      },\n      draggingLink: null,\n      rootDivOffset: {\n        top: 0,\n        left: 0\n      }\n    };\n  },\n  components: {\n    FlowchartLink,\n    FlowchartNode\n  },\n  computed: {\n    nodeOptions() {\n      return {\n        centerY: this.localScene.centerY,\n        centerX: this.localScene.centerX,\n        scale: this.localScene.scale,\n        offsetTop: this.rootDivOffset.top,\n        offsetLeft: this.rootDivOffset.left,\n        selected: this.action.selected\n      };\n    },\n    lines() {\n      const lines = [];\n      this.localScene.links.forEach(link => {\n        const fromNode = this.localScene.nodes.find(node => node.id === link.from);\n        const toNode = this.localScene.nodes.find(node => node.id === link.to);\n        if (!fromNode || !toNode) {\n          console.error(`Nodes not found for link ${link.id}`);\n          return;\n        }\n        let x, y, cy, cx, ex, ey;\n        x = this.localScene.centerX + fromNode.x;\n        y = this.localScene.centerY + fromNode.y;\n        [cx, cy] = this.getPortPosition('bottom', x, y);\n        x = this.localScene.centerX + toNode.x;\n        y = this.localScene.centerY + toNode.y;\n        [ex, ey] = this.getPortPosition('top', x, y);\n        lines.push({\n          start: [cx, cy],\n          end: [ex, ey],\n          id: link.id\n        });\n      });\n      return lines;\n    }\n  },\n  mounted() {\n    this.rootDivOffset.top = this.$el ? this.$el.offsetTop : 0;\n    this.rootDivOffset.left = this.$el ? this.$el.offsetLeft : 0;\n    this.localScene.nodes.forEach(node => {\n      node.x = Math.random() * (this.$el.clientWidth - 80);\n      node.y = Math.random() * (this.height - 80);\n    });\n    // console.log(22222, this.rootDivOffset);\n  },\n  methods: {\n    findNodeWithID(id) {\n      return this.localScene.nodes.find(item => {\n        return id === item.id;\n      });\n    },\n    getPortPosition(type, x, y) {\n      if (type === 'top') {\n        return [x + 40, y];\n      } else if (type === 'bottom') {\n        return [x + 40, y + 80];\n      }\n    },\n    linkingStart(index) {\n      this.action.linking = true;\n      this.draggingLink = {\n        from: index,\n        mx: 0,\n        my: 0\n      };\n    },\n    linkingStop(index) {\n      // add new Link\n      if (this.draggingLink && this.draggingLink.from !== index) {\n        // check link existence\n        const existed = this.localScene.links.find(link => {\n          return link.from === this.draggingLink.from && link.to === index;\n        });\n        if (!existed) {\n          let maxID = Math.max(0, ...this.localScene.links.map(link => {\n            return link.id;\n          }));\n          const newLink = {\n            id: maxID + 1,\n            from: this.draggingLink.from,\n            to: index\n          };\n          this.localScene.links.push(newLink);\n          this.$emit('linkAdded', newLink);\n        }\n      }\n      this.draggingLink = null;\n    },\n    linkDelete(id) {\n      const deletedLink = this.localScene.links.find(item => {\n        return item.id === id;\n      });\n      if (deletedLink) {\n        this.localScene.links = this.localScene.links.filter(item => {\n          return item.id !== id;\n        });\n        this.$emit('linkBreak', deletedLink);\n      }\n    },\n    nodeSelected(id, e) {\n      this.action.dragging = id;\n      this.action.selected = id;\n      this.$emit('nodeClick', id);\n      this.mouse.lastX = e.pageX || e.clientX + document.documentElement.scrollLeft;\n      this.mouse.lastY = e.pageY || e.clientY + document.documentElement.scrollTop;\n      const nodeIndex = this.localScene.nodes.findIndex(node => node.id === id);\n      if (nodeIndex !== -1) {\n        this.localScene.nodes[nodeIndex].visible = true;\n      }\n    },\n    handleMove(e) {\n      if (this.action.linking) {\n        [this.mouse.x, this.mouse.y] = getMousePosition(this.$el, e);\n        [this.draggingLink.mx, this.draggingLink.my] = [this.mouse.x, this.mouse.y];\n      }\n      if (this.action.dragging) {\n        this.mouse.x = e.pageX || e.clientX + document.documentElement.scrollLeft;\n        this.mouse.y = e.pageY || e.clientY + document.documentElement.scrollTop;\n        let diffX = this.mouse.x - this.mouse.lastX;\n        let diffY = this.mouse.y - this.mouse.lastY;\n        this.mouse.lastX = this.mouse.x;\n        this.mouse.lastY = this.mouse.y;\n        this.moveSelectedNode(diffX, diffY);\n      }\n      if (this.action.scrolling) {\n        [this.mouse.x, this.mouse.y] = getMousePosition(this.$el, e);\n        let diffX = this.mouse.x - this.mouse.lastX;\n        let diffY = this.mouse.y - this.mouse.lastY;\n        this.mouse.lastX = this.mouse.x;\n        this.mouse.lastY = this.mouse.y;\n        this.localScene.centerX += diffX;\n        this.localScene.centerY += diffY;\n\n        // this.hasDragged = true\n      }\n    },\n    handleUp(e) {\n      const target = e.target || e.srcElement;\n      if (this.$el.contains(target)) {\n        if (typeof target.className !== 'string' || target.className.indexOf('node-input') < 0) {\n          this.draggingLink = null;\n        }\n        if (typeof target.className === 'string' && target.className.indexOf('node-delete') > -1) {\n          // console.log('delete2', this.action.dragging);\n          this.nodeDelete(this.action.dragging);\n        }\n      }\n      this.action.linking = false;\n      this.action.dragging = null;\n      this.action.scrolling = false;\n    },\n    handleDown(e) {\n      const target = e.target || e.srcElement;\n      // console.log('for scroll', target, e.keyCode, e.which)\n      if ((target === this.$el || target.matches('svg, svg *')) && e.which === 1) {\n        this.action.scrolling = true;\n        [this.mouse.lastX, this.mouse.lastY] = getMousePosition(this.$el, e);\n        this.action.selected = null; // deselectAll\n      }\n      this.$emit('canvasClick', e);\n    },\n    moveSelectedNode(dx, dy) {\n      let index = this.localScene.nodes.findIndex(item => {\n        return item.id === this.action.dragging;\n      });\n      if (index !== -1) {\n        let left = this.localScene.nodes[index].x + dx / this.localScene.scale;\n        let top = this.localScene.nodes[index].y + dy / this.localScene.scale;\n        this.localScene.nodes[index] = Object.assign(this.localScene.nodes[index], {\n          x: left,\n          y: top\n        });\n      }\n    },\n    nodeDelete(id) {\n      const nodeIndex = this.localScene.nodes.findIndex(node => node.id === id);\n      if (nodeIndex !== -1) {\n        this.localScene.nodes.splice(nodeIndex, 1);\n        this.$emit('nodeDeleted', id);\n      }\n      this.localScene.nodes = this.localScene.nodes.filter(node => {\n        return node.id !== id;\n      });\n      this.localScene.links = this.localScene.links.filter(link => {\n        return link.from !== id && link.to !== id;\n      });\n      this.$emit('nodeDelete', id);\n    },\n    handleMousedown(event) {\n      const nodeId = event.target.dataset.nodeId;\n      if (nodeId) {\n        this.dragging = true;\n        this.currentNode = this.localScene.nodes.find(node => node.id === parseInt(nodeId));\n        this.offsetX = event.clientX - this.currentNode.x;\n        this.offsetY = event.clientY - this.currentNode.y;\n      }\n    },\n    handleMouseMove(event) {\n      if (this.dragging) {\n        this.currentNode.x = event.clientX - this.offsetX;\n        this.currentNode.y = event.clientY - this.offsetY;\n      }\n    },\n    handleMouseUp(event) {\n      this.dragging = false;\n      this.currentNode = null;\n      if (event.target.classList.contains('node-delete')) {\n        const nodeId = event.target.parentNode.dataset.nodeId;\n        this.localScene.nodes = this.localScene.nodes.filter(node => node.id !== parseInt(nodeId));\n        this.$emit('nodeDeleted', nodeId);\n      }\n    }\n  }\n};","map":{"version":3,"names":["FlowchartLink","FlowchartNode","getMousePosition","name","props","scene","type","Object","default","centerX","scale","centerY","nodes","links","x","Math","random","y","height","Number","data","localScene","JSON","parse","stringify","dragging","currentNode","offsetX","offsetY","action","linking","scrolling","selected","mouse","lastX","lastY","draggingLink","rootDivOffset","top","left","components","computed","nodeOptions","offsetTop","offsetLeft","lines","forEach","link","fromNode","find","node","id","from","toNode","to","console","error","cy","cx","ex","ey","getPortPosition","push","start","end","mounted","$el","clientWidth","methods","findNodeWithID","item","linkingStart","index","mx","my","linkingStop","existed","maxID","max","map","newLink","$emit","linkDelete","deletedLink","filter","nodeSelected","e","pageX","clientX","document","documentElement","scrollLeft","pageY","clientY","scrollTop","nodeIndex","findIndex","visible","handleMove","diffX","diffY","moveSelectedNode","handleUp","target","srcElement","contains","className","indexOf","nodeDelete","handleDown","matches","which","dx","dy","assign","splice","handleMousedown","event","nodeId","dataset","parseInt","handleMouseMove","handleMouseUp","classList","parentNode"],"sources":["/Users/kerinwong/Documents/VSCode_tutorial/my-simple-flowchart/src/components/SimpleFlowchart.vue"],"sourcesContent":["<template>\n    <div class=\"flowchart-container\" \n        @mousemove=\"handleMove\" \n        @mouseup=\"handleUp\"\n        @mousedown=\"handleDown\">\n        <svg width=\"100%\" :height=\"`${height}px`\">\n        <flowchart-link :link=\"link\" \n            v-for=\"(link, index) in lines\" \n            :key=\"`link${index}`\"\n            @deleteLink=\"linkDelete(link.id)\">\n        </flowchart-link>\n        </svg>\n\n        <flowchart-node\n        v-for=\"(node, index) in scene.nodes\" \n        :key=\"`node${index}`\" \n        :node=\"node\" \n        :options=\"nodeOptions\"\n        :x=\"node.x\" :y=\"node.y\"\n        @linkingStart=\"linkingStart(node.id)\" \n        @linkingStop=\"linkingStop(node.id)\" \n        @nodeSelected=\"nodeSelected(node.id, $event)\" \n        @nodeDelete=\"nodeDelete(node.id)\">\n        </flowchart-node>\n    </div>\n</template>\n\n<script>\nimport FlowchartLink from './FlowchartLink.vue';\nimport FlowchartNode from './FlowchartNode.vue';\nimport { getMousePosition } from '../assets/utility/position.js';\n\nexport default {\n    name: 'VueFlowchart',\n    props: {\n      scene: {\n          type: Object,\n          default() {\n              return {\n                  centerX: 1024,\n                  scale: 1,\n                  centerY: 140,\n                  nodes: [],\n                  links: [],\n                  x: Math.random() * 500,\n                  y: Math.random() * 500\n\n              }\n          }\n      },\n      height: {\n          type: Number,\n          default: 400,\n      },\n    },\n    data() {\n      return {\n        localScene: JSON.parse(JSON.stringify(this.scene)),\n\n        dragging: false,\n        currentNode: null,\n        offsetX: 0,\n        offsetY: 0,\n\n        action: {\n          linking: false,\n          dragging: false,\n          scrolling: false,\n          selected: 0,\n        },\n        mouse: {\n          x: 0,\n          y: 0,\n          lastX: 0,\n          lastY: 0,\n        },\n        draggingLink: null,\n        rootDivOffset: {\n          top: 0,\n          left: 0\n        },\n      };\n    },\n    components: {\n      FlowchartLink,\n      FlowchartNode,\n    },\n    computed: {\n      nodeOptions() {\n        return {\n          centerY: this.localScene.centerY,\n          centerX: this.localScene.centerX,\n          scale: this.localScene.scale,\n          offsetTop: this.rootDivOffset.top,\n          offsetLeft: this.rootDivOffset.left,\n          selected: this.action.selected,\n        }\n      },\n      lines() {\n        const lines = [];\n        this.localScene.links.forEach(link => {\n          const fromNode = this.localScene.nodes.find(node => node.id === link.from);\n          const toNode = this.localScene.nodes.find(node => node.id === link.to);\n          if (!fromNode || !toNode) {\n            console.error(`Nodes not found for link ${link.id}`);\n            return;\n          }\n          let x, y, cy, cx, ex, ey;\n          x = this.localScene.centerX + fromNode.x;\n          y = this.localScene.centerY + fromNode.y;\n          [cx, cy] = this.getPortPosition('bottom', x, y);\n          x = this.localScene.centerX + toNode.x;\n          y = this.localScene.centerY + toNode.y;\n          [ex, ey] = this.getPortPosition('top', x, y);\n          lines.push({ \n            start: [cx, cy], \n            end: [ex, ey],\n            id: link.id,\n          });\n        });\n        return lines;\n      },\n    },\n    mounted() {\n      this.rootDivOffset.top = this.$el ? this.$el.offsetTop : 0;\n      this.rootDivOffset.left = this.$el ? this.$el.offsetLeft : 0;\n      this.localScene.nodes.forEach(node => {\n        node.x = Math.random() * (this.$el.clientWidth - 80);\n        node.y = Math.random() * (this.height - 80);\n      });\n      // console.log(22222, this.rootDivOffset);\n    },\n    methods: {\n      findNodeWithID(id) {\n        return this.localScene.nodes.find((item) => {\n            return id === item.id\n        })\n      },\n      getPortPosition(type, x, y) {\n        if (type === 'top') {\n          return [x + 40, y];\n        }\n        else if (type === 'bottom') {\n          return [x + 40, y + 80];\n        }\n      },\n      linkingStart(index) {\n        this.action.linking = true;\n        this.draggingLink = {\n          from: index,\n          mx: 0,\n          my: 0,\n        };\n      },\n      linkingStop(index) {\n        // add new Link\n        if (this.draggingLink && this.draggingLink.from !== index) {\n          // check link existence\n          const existed = this.localScene.links.find((link) => {\n            return link.from === this.draggingLink.from && link.to === index;\n          })\n          if (!existed) {\n            let maxID = Math.max(0, ...this.localScene.links.map((link) => {\n              return link.id\n            }))\n            const newLink = {\n              id: maxID + 1,\n              from: this.draggingLink.from,\n              to: index,\n            };\n            this.localScene.links.push(newLink)\n            this.$emit('linkAdded', newLink)\n          }\n        }\n        this.draggingLink = null\n      },\n      linkDelete(id) {\n        const deletedLink = this.localScene.links.find((item) => {\n            return item.id === id;\n        });\n        if (deletedLink) {\n          this.localScene.links = this.localScene.links.filter((item) => {\n              return item.id !== id;\n          });\n          this.$emit('linkBreak', deletedLink);\n        }\n      },\n      nodeSelected(id, e) {\n        this.action.dragging = id;\n        this.action.selected = id;\n        this.$emit('nodeClick', id);\n        this.mouse.lastX = e.pageX || e.clientX + document.documentElement.scrollLeft\n        this.mouse.lastY = e.pageY || e.clientY + document.documentElement.scrollTop\n                \n        const nodeIndex = this.localScene.nodes.findIndex(node => node.id === id);\n        if (nodeIndex !== -1) {\n          this.localScene.nodes[nodeIndex].visible = true;\n        }\n      },\n      handleMove(e) {\n        if (this.action.linking) {\n          [this.mouse.x, this.mouse.y] = getMousePosition(this.$el, e);\n          [this.draggingLink.mx, this.draggingLink.my] = [this.mouse.x, this.mouse.y];\n        }\n        if (this.action.dragging) {\n          this.mouse.x = e.pageX || e.clientX + document.documentElement.scrollLeft\n          this.mouse.y = e.pageY || e.clientY + document.documentElement.scrollTop\n          let diffX = this.mouse.x - this.mouse.lastX;\n          let diffY = this.mouse.y - this.mouse.lastY;\n  \n          this.mouse.lastX = this.mouse.x;\n          this.mouse.lastY = this.mouse.y;\n          this.moveSelectedNode(diffX, diffY);\n        }\n        if (this.action.scrolling) {\n          [this.mouse.x, this.mouse.y] = getMousePosition(this.$el, e);\n          let diffX = this.mouse.x - this.mouse.lastX;\n          let diffY = this.mouse.y - this.mouse.lastY;\n  \n          this.mouse.lastX = this.mouse.x;\n          this.mouse.lastY = this.mouse.y;\n  \n          this.localScene.centerX += diffX;\n          this.localScene.centerY += diffY;\n  \n          // this.hasDragged = true\n        }\n      },\n      handleUp(e) {\n        const target = e.target || e.srcElement;\n        if (this.$el.contains(target)) {\n          if (typeof target.className !== 'string' || target.className.indexOf('node-input') < 0) {\n            this.draggingLink = null;\n          }\n          if (typeof target.className === 'string' && target.className.indexOf('node-delete') > -1) {\n            // console.log('delete2', this.action.dragging);\n            this.nodeDelete(this.action.dragging);\n          }\n        }\n        this.action.linking = false;\n        this.action.dragging = null;\n        this.action.scrolling = false;\n      },\n      handleDown(e) {\n        const target = e.target || e.srcElement;\n        // console.log('for scroll', target, e.keyCode, e.which)\n        if ((target === this.$el || target.matches('svg, svg *')) && e.which === 1) {\n          this.action.scrolling = true;\n          [this.mouse.lastX, this.mouse.lastY] = getMousePosition(this.$el, e);\n          this.action.selected = null; // deselectAll\n        }\n        this.$emit('canvasClick', e);\n      },\n\n      moveSelectedNode(dx, dy) {\n        let index = this.localScene.nodes.findIndex((item) => {\n          return item.id === this.action.dragging\n        })\n        if (index !== -1) {\n          let left = this.localScene.nodes[index].x + dx / this.localScene.scale;\n          let top = this.localScene.nodes[index].y + dy / this.localScene.scale;\n          this.localScene.nodes[index] = Object.assign(this.localScene.nodes[index], {\n            x: left,\n            y: top,\n          });\n        }\n      },\n      nodeDelete(id) {\n        const nodeIndex = this.localScene.nodes.findIndex(node => node.id === id);\n        if (nodeIndex !== -1) {\n          this.localScene.nodes.splice(nodeIndex, 1);\n          this.$emit('nodeDeleted', id);\n        }\n        this.localScene.nodes = this.localScene.nodes.filter((node) => {\n          return node.id !== id;\n        })\n        this.localScene.links = this.localScene.links.filter((link) => {\n          return link.from !== id && link.to !== id\n        })\n        this.$emit('nodeDelete', id)\n      },\n\n      handleMousedown(event) {\n        const nodeId = event.target.dataset.nodeId;\n        if (nodeId) {\n          this.dragging = true;\n          this.currentNode = this.localScene.nodes.find((node) => node.id === parseInt(nodeId));\n          this.offsetX = event.clientX - this.currentNode.x;\n          this.offsetY = event.clientY - this.currentNode.y;\n        }\n      },\n      handleMouseMove(event) {\n        if (this.dragging) {\n          this.currentNode.x = event.clientX - this.offsetX;\n          this.currentNode.y = event.clientY - this.offsetY;\n        }\n      },\n      handleMouseUp(event) {\n        this.dragging = false;\n        this.currentNode = null;\n        if (event.target.classList.contains('node-delete')) {\n          const nodeId = event.target.parentNode.dataset.nodeId;\n          this.localScene.nodes = this.localScene.nodes.filter((node) => node.id !== parseInt(nodeId));\n          this.$emit('nodeDeleted', nodeId);\n        }\n      },\n\n    },\n  }\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n.flowchart-container {\nmargin: 0;\nbackground: #ddd;\nposition: relative;\noverflow: hidden;\n    svg {\n        cursor: grab;\n    }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}