{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport FlowchartLink from './FlowchartLink.vue';\nimport FlowchartNode from './FlowchartNode.vue';\nimport { getMousePosition } from '../assets/utility/position.js';\nexport default {\n  name: 'VueFlowchart',\n  props: {\n    scene: {\n      //scene: Object,\n      type: Object,\n      default() {\n        return {\n          centerX: 1024,\n          scale: 1,\n          centerY: 140,\n          nodes: [],\n          links: []\n        };\n      }\n    },\n    height: {\n      type: Number,\n      default: 400\n    }\n  },\n  data() {\n    return {\n      localScene: JSON.parse(JSON.stringify(this.scene)),\n      action: {\n        linking: false,\n        dragging: false,\n        scrolling: false,\n        selected: 0\n      },\n      mouse: {\n        x: 0,\n        y: 0,\n        lastX: 0,\n        lastY: 0\n      },\n      draggingLink: null,\n      rootDivOffset: {\n        top: 0,\n        left: 0\n      }\n    };\n  },\n  components: {\n    FlowchartLink,\n    FlowchartNode\n  },\n  computed: {\n    nodeOptions() {\n      return {\n        centerY: this.localScene.centerY,\n        centerX: this.localScene.centerX,\n        scale: this.localScene.scale,\n        offsetTop: this.rootDivOffset.top,\n        offsetLeft: this.rootDivOffset.left,\n        selected: this.action.selected\n      };\n    },\n    lines() {\n      const lines = this.localScene.links.map(link => {\n        const fromNode = this.findNodeWithID(link.from);\n        const toNode = this.findNodeWithID(link.to);\n        let x, y, cy, cx, ex, ey;\n        x = this.localScene.centerX + fromNode.x;\n        y = this.localScene.centerY + fromNode.y;\n        [cx, cy] = this.getPortPosition('bottom', x, y);\n        x = this.localScene.centerX + toNode.x;\n        y = this.localScene.centerY + toNode.y;\n        [ex, ey] = this.getPortPosition('top', x, y);\n        return {\n          start: [cx, cy],\n          end: [ex, ey],\n          id: link.id\n        };\n      });\n      if (this.draggingLink) {\n        let x, y, cy, cx;\n        const fromNode = this.findNodeWithID(this.draggingLink.from);\n        x = this.localScene.centerX + fromNode.x;\n        y = this.localScene.centerY + fromNode.y;\n        [cx, cy] = this.getPortPosition('bottom', x, y);\n        // push temp dragging link, mouse cursor postion = link end postion \n        lines.push({\n          start: [cx, cy],\n          end: [this.draggingLink.mx, this.draggingLink.my]\n        });\n      }\n      return lines;\n    }\n  },\n  mounted() {\n    this.rootDivOffset.top = this.$el ? this.$el.offsetTop : 0;\n    this.rootDivOffset.left = this.$el ? this.$el.offsetLeft : 0;\n    this.localScene.nodes.forEach(node => {\n      node.x = Math.random() * (this.$el.clientWidth - 80);\n      node.y = Math.random() * (this.height - 80);\n    });\n    // console.log(22222, this.rootDivOffset);\n  },\n  methods: {\n    findNodeWithID(id) {\n      return this.localScene.nodes.find(item => {\n        return id === item.id;\n      });\n    },\n    getPortPosition(type, x, y) {\n      if (type === 'top') {\n        return [x + 40, y];\n      } else if (type === 'bottom') {\n        return [x + 40, y + 80];\n      }\n    },\n    linkingStart(index) {\n      this.action.linking = true;\n      this.draggingLink = {\n        from: index,\n        mx: 0,\n        my: 0\n      };\n    },\n    linkingStop(index) {\n      this.action.linking = false;\n      this.draggingLink = null;\n\n      // add new Link\n      if (this.draggingLink && this.draggingLink.from !== index) {\n        // check link existence\n        const existed = this.localScene.links.find(link => {\n          return link.from === this.draggingLink.from && link.to === index;\n        });\n        if (!existed) {\n          let maxID = Math.max(0, ...this.localScene.links.map(link => {\n            return link.id;\n          }));\n          const newLink = {\n            id: maxID + 1,\n            from: this.draggingLink.from,\n            to: index\n          };\n          this.localScene.links.push(newLink);\n          this.$emit('linkAdded', newLink);\n        }\n      }\n      this.draggingLink = null;\n    },\n    linkDelete(id) {\n      const deletedLink = this.localScene.links.find(item => {\n        return item.id === id;\n      });\n      if (deletedLink) {\n        this.localScene.links = this.localScene.links.filter(item => {\n          return item.id !== id;\n        });\n        this.$emit('linkBreak', deletedLink);\n      }\n    },\n    nodeSelected(id, e) {\n      this.action.dragging = id;\n      this.action.selected = id;\n      this.$emit('nodeClick', id);\n      this.mouse.lastX = e.pageX || e.clientX + document.documentElement.scrollLeft;\n      this.mouse.lastY = e.pageY || e.clientY + document.documentElement.scrollTop;\n    },\n    handleMove(e) {\n      if (this.action.linking) {\n        [this.mouse.x, this.mouse.y] = getMousePosition(this.$el, e);\n        [this.draggingLink.mx, this.draggingLink.my] = [this.mouse.x, this.mouse.y];\n      }\n      if (this.action.dragging) {\n        this.mouse.x = e.pageX || e.clientX + document.documentElement.scrollLeft;\n        this.mouse.y = e.pageY || e.clientY + document.documentElement.scrollTop;\n        let diffX = this.mouse.x - this.mouse.lastX;\n        let diffY = this.mouse.y - this.mouse.lastY;\n        this.mouse.lastX = this.mouse.x;\n        this.mouse.lastY = this.mouse.y;\n        this.moveSelectedNode(diffX, diffY);\n      }\n      if (this.action.scrolling) {\n        [this.mouse.x, this.mouse.y] = getMousePosition(this.$el, e);\n        let diffX = this.mouse.x - this.mouse.lastX;\n        let diffY = this.mouse.y - this.mouse.lastY;\n        this.mouse.lastX = this.mouse.x;\n        this.mouse.lastY = this.mouse.y;\n        this.$emit('update:scene', {\n          ...this.localScene,\n          centerX: this.localScene.centerX + diffX,\n          centerY: this.localScene.centerY + diffY\n        });\n\n        //   this.scene.centerX += diffX;\n        //   this.scene.centerY += diffY;\n\n        // this.hasDragged = true\n      }\n    },\n    handleUp(e) {\n      const target = e.target || e.srcElement;\n      if (this.$el.contains(target)) {\n        if (typeof target.className !== 'string' || target.className.indexOf('node-input') < 0) {\n          this.draggingLink = null;\n        }\n        if (typeof target.className === 'string' && target.className.indexOf('node-delete') > -1) {\n          // console.log('delete2', this.action.dragging);\n          this.nodeDelete(this.action.dragging);\n        }\n      }\n      this.action.linking = false;\n      this.action.dragging = null;\n      this.action.scrolling = false;\n    },\n    handleDown(e) {\n      const target = e.target || e.srcElement;\n      // console.log('for scroll', target, e.keyCode, e.which)\n      if ((target === this.$el || target.matches('svg, svg *')) && e.which === 1) {\n        this.action.scrolling = true;\n        [this.mouse.lastX, this.mouse.lastY] = getMousePosition(this.$el, e);\n        this.action.selected = null; // deselectAll\n      }\n      this.$emit('canvasClick', e);\n    },\n    moveSelectedNode(dx, dy) {\n      let index = this.localScene.nodes.findIndex(item => {\n        return item.id === this.action.dragging;\n      });\n      if (index > -1) {\n        this.localScene.nodes[index].x += dx;\n        this.localScene.nodes[index].y += dy;\n      }\n    },\n    nodeDelete(id) {\n      let index = this.localScene.nodes.findIndex(item => {\n        return item.id === id;\n      });\n      if (index > -1) {\n        this.localScene.nodes.splice(index, 1);\n        this.$emit('nodeDelete', id);\n      }\n    }\n  },\n  watch: {\n    scene: {\n      handler(newScene) {\n        this.localScene = JSON.parse(JSON.stringify(newScene));\n      },\n      deep: true\n    }\n  }\n};","map":{"version":3,"names":["FlowchartLink","FlowchartNode","getMousePosition","name","props","scene","type","Object","default","centerX","scale","centerY","nodes","links","height","Number","data","localScene","JSON","parse","stringify","action","linking","dragging","scrolling","selected","mouse","x","y","lastX","lastY","draggingLink","rootDivOffset","top","left","components","computed","nodeOptions","offsetTop","offsetLeft","lines","map","link","fromNode","findNodeWithID","from","toNode","to","cy","cx","ex","ey","getPortPosition","start","end","id","push","mx","my","mounted","$el","forEach","node","Math","random","clientWidth","methods","find","item","linkingStart","index","linkingStop","existed","maxID","max","newLink","$emit","linkDelete","deletedLink","filter","nodeSelected","e","pageX","clientX","document","documentElement","scrollLeft","pageY","clientY","scrollTop","handleMove","diffX","diffY","moveSelectedNode","handleUp","target","srcElement","contains","className","indexOf","nodeDelete","handleDown","matches","which","dx","dy","findIndex","splice","watch","handler","newScene","deep"],"sources":["/Users/kerinwong/Documents/VSCode_tutorial/my-simple-flowchart/src/components/SimpleFlowchart.vue"],"sourcesContent":["<template>\n    <div class=\"flowchart-container\" \n      @mousemove=\"handleMove\" \n      @mouseup=\"handleUp\"\n      @mousedown=\"handleDown\">\n      <svg width=\"100%\" :height=\"`${height}px`\">\n        <flowchart-link :link=\"link\"\n          v-for=\"(link, index) in lines\" \n          :key=\"`link${index}`\"\n          @deleteLink=\"linkDelete(link.id)\">\n        </flowchart-link>\n      </svg>\n      <flowchart-node v-for=\"(node, index) in scene.nodes\" \n        :key=\"`node${index}`\"\n        :node=\"node\" \n        :options=\"nodeOptions\"\n        @linkingStart=\"linkingStart(node.id)\"\n        @linkingStop=\"linkingStop(node.id)\"\n        @deleteNode=\"nodeDelete(node.id)\"\n        @editNode=\"editNode(node.id)\"\n        @nodeSelected=\"nodeSelected(node.id, $event)\">\n      </flowchart-node>\n    </div>\n  </template>\n  \n  <script>\n  import FlowchartLink from './FlowchartLink.vue';\n  import FlowchartNode from './FlowchartNode.vue';\n  import { getMousePosition } from '../assets/utility/position.js';\n  \n  export default {\n    name: 'VueFlowchart',\n    props: {\n      scene: {\n        //scene: Object,\n        type: Object,\n        default() {\n          return {\n            centerX: 1024,\n            scale: 1,\n            centerY: 140,\n            nodes: [],\n            links: [],\n          }\n        }\n      },\n      height: {\n        type: Number,\n        default: 400,\n      },\n    },\n    data() {\n      return {\n        localScene: JSON.parse(JSON.stringify(this.scene)),\n        action: {\n          linking: false,\n          dragging: false,\n          scrolling: false,\n          selected: 0,\n        },\n        mouse: {\n          x: 0,\n          y: 0,\n          lastX: 0,\n          lastY: 0,\n        },\n        draggingLink: null,\n        rootDivOffset: {\n          top: 0,\n          left: 0\n        },\n      };\n    },\n    components: {\n      FlowchartLink,\n      FlowchartNode,\n    },\n    computed: {\n      nodeOptions() {\n        return {\n          centerY: this.localScene.centerY,\n          centerX: this.localScene.centerX,\n          scale: this.localScene.scale,\n          offsetTop: this.rootDivOffset.top,\n          offsetLeft: this.rootDivOffset.left,\n          selected: this.action.selected,\n        }\n      },\n      lines() {\n        const lines = this.localScene.links.map((link) => {\n          const fromNode = this.findNodeWithID(link.from)\n          const toNode = this.findNodeWithID(link.to)\n          let x, y, cy, cx, ex, ey;\n          x = this.localScene.centerX + fromNode.x;\n          y = this.localScene.centerY + fromNode.y;\n          [cx, cy] = this.getPortPosition('bottom', x, y);\n          x = this.localScene.centerX + toNode.x;\n          y = this.localScene.centerY + toNode.y;\n          [ex, ey] = this.getPortPosition('top', x, y);\n          return { \n            start: [cx, cy], \n            end: [ex, ey],\n            id: link.id,\n          };\n        })\n        if (this.draggingLink) {\n          let x, y, cy, cx;\n          const fromNode = this.findNodeWithID(this.draggingLink.from)\n          x = this.localScene.centerX + fromNode.x;\n          y = this.localScene.centerY + fromNode.y;\n          [cx, cy] = this.getPortPosition('bottom', x, y);\n          // push temp dragging link, mouse cursor postion = link end postion \n          lines.push({ \n            start: [cx, cy], \n            end: [this.draggingLink.mx, this.draggingLink.my],\n          })\n        }\n        return lines;\n      },\n    },\n    mounted() {\n      this.rootDivOffset.top = this.$el ? this.$el.offsetTop : 0;\n      this.rootDivOffset.left = this.$el ? this.$el.offsetLeft : 0;\n      this.localScene.nodes.forEach(node => {\n        node.x = Math.random() * (this.$el.clientWidth - 80);\n        node.y = Math.random() * (this.height - 80);\n      });\n      // console.log(22222, this.rootDivOffset);\n    },\n    methods: {\n      findNodeWithID(id) {\n        return this.localScene.nodes.find((item) => {\n            return id === item.id\n        })\n      },\n      getPortPosition(type, x, y) {\n        if (type === 'top') {\n          return [x + 40, y];\n        }\n        else if (type === 'bottom') {\n          return [x + 40, y + 80];\n        }\n      },\n      linkingStart(index) {\n        this.action.linking = true;\n        this.draggingLink = {\n          from: index,\n          mx: 0,\n          my: 0,\n        };\n      },\n      linkingStop(index) {\n        this.action.linking = false\n        this.draggingLink = null\n\n        // add new Link\n        if (this.draggingLink && this.draggingLink.from !== index) {\n          // check link existence\n          const existed = this.localScene.links.find((link) => {\n            return link.from === this.draggingLink.from && link.to === index;\n          })\n          if (!existed) {\n            let maxID = Math.max(0, ...this.localScene.links.map((link) => {\n              return link.id\n            }))\n            const newLink = {\n              id: maxID + 1,\n              from: this.draggingLink.from,\n              to: index,\n            };\n            this.localScene.links.push(newLink)\n            this.$emit('linkAdded', newLink)\n          }\n        }\n        this.draggingLink = null\n      },\n\n      linkDelete(id) {\n        const deletedLink = this.localScene.links.find((item) => {\n          return item.id === id;\n        });\n        if (deletedLink) {\n          this.localScene.links = this.localScene.links.filter((item) => {\n            return item.id !== id;\n          });\n          this.$emit('linkBreak', deletedLink);\n        }\n      },\n      nodeSelected(id, e) {\n        this.action.dragging = id;\n        this.action.selected = id;\n        this.$emit('nodeClick', id);\n        this.mouse.lastX = e.pageX || e.clientX + document.documentElement.scrollLeft\n        this.mouse.lastY = e.pageY || e.clientY + document.documentElement.scrollTop\n      },\n      handleMove(e) {\n        if (this.action.linking) {\n          [this.mouse.x, this.mouse.y] = getMousePosition(this.$el, e);\n          [this.draggingLink.mx, this.draggingLink.my] = [this.mouse.x, this.mouse.y];\n        }\n        if (this.action.dragging) {\n          this.mouse.x = e.pageX || e.clientX + document.documentElement.scrollLeft\n          this.mouse.y = e.pageY || e.clientY + document.documentElement.scrollTop\n          let diffX = this.mouse.x - this.mouse.lastX;\n          let diffY = this.mouse.y - this.mouse.lastY;\n  \n          this.mouse.lastX = this.mouse.x;\n          this.mouse.lastY = this.mouse.y;\n          this.moveSelectedNode(diffX, diffY);\n        }\n        if (this.action.scrolling) {\n          [this.mouse.x, this.mouse.y] = getMousePosition(this.$el, e);\n          let diffX = this.mouse.x - this.mouse.lastX;\n          let diffY = this.mouse.y - this.mouse.lastY;\n  \n          this.mouse.lastX = this.mouse.x;\n          this.mouse.lastY = this.mouse.y;\n          \n          this.$emit('update:scene', {\n            ...this.localScene,\n            centerX: this.localScene.centerX + diffX,\n            centerY: this.localScene.centerY + diffY,\n          });\n\n        //   this.scene.centerX += diffX;\n        //   this.scene.centerY += diffY;\n  \n          // this.hasDragged = true\n        }\n      },\n      handleUp(e) {\n        const target = e.target || e.srcElement;\n        if (this.$el.contains(target)) {\n          if (typeof target.className !== 'string' || target.className.indexOf('node-input') < 0) {\n            this.draggingLink = null;\n          }\n          if (typeof target.className === 'string' && target.className.indexOf('node-delete') > -1) {\n            // console.log('delete2', this.action.dragging);\n            this.nodeDelete(this.action.dragging);\n          }\n        }\n        this.action.linking = false;\n        this.action.dragging = null;\n        this.action.scrolling = false;\n      },\n      handleDown(e) {\n        const target = e.target || e.srcElement;\n        // console.log('for scroll', target, e.keyCode, e.which)\n        if ((target === this.$el || target.matches('svg, svg *')) && e.which === 1) {\n          this.action.scrolling = true;\n          [this.mouse.lastX, this.mouse.lastY] = getMousePosition(this.$el, e);\n          this.action.selected = null; // deselectAll\n        }\n        this.$emit('canvasClick', e);\n      },\n      moveSelectedNode(dx, dy) {\n        let index = this.localScene.nodes.findIndex((item) => {\n          return item.id === this.action.dragging\n        })\n        if (index > -1) {\n          this.localScene.nodes[index].x += dx\n          this.localScene.nodes[index].y += dy\n        }\n      },\n      nodeDelete(id) {\n        let index = this.localScene.nodes.findIndex((item) => {\n          return item.id === id;\n        })\n        if (index > -1) {\n          this.localScene.nodes.splice(index, 1)\n          this.$emit('nodeDelete', id);\n        }\n      },\n    },\n    watch: {\n      scene: {\n        handler(newScene) {\n          this.localScene = JSON.parse(JSON.stringify(newScene));\n        },\n        deep: true\n      }\n    }\n  }\n  </script>\n  \n  <!-- Add \"scoped\" attribute to limit CSS to this component only -->\n  <style scoped>\n  .flowchart-container {\n    margin: 0;\n    background: #ddd;\n    position: relative;\n    overflow: hidden;\n  }\n\n/* .flowchart-node {\n  width:200px;\n  height: 200px;\n  position: absolute;\n  box-sizing: border-box;\n  border: none;\n  background: white;\n  z-index: 1;\n  opacity: .9;\n  cursor: move;\n  transform-origin: top left;\n  \n}\n.flowchart-node .node-main {\n  text-align: center;\n}\n.node-main .node-type {\n  background: blue;\n  color: white;\n  font-size: 13px;\n  padding: 6px;\n}\n.node-main .node-label {\n  font-size: 13px;\n} */\n</style>\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}